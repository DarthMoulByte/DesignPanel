<?xml version="1.0" encoding="utf-8"?>
<view:BaseWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:view="plugin.view.*"
						width="400"
						title="{resourceManager.getString('resources', 'export')}" 
						creationComplete="creationCompleteHandler(event)"
						>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import core.SettingManager;
			import core.ShareConfig;
			import core.events.ControllerEvent;
			import core.model.vo.ExportVO;
			import core.utils.GlobalConstValues;
			
			public var shareConfig:ShareConfig;
			
			[Bindable]
			private var _settingManager:SettingManager = SettingManager.getInstance();
			
			[Bindable]
			private var _isSWF:Boolean;
			[Bindable]
			private var _isPNGs:Boolean;
			[Bindable]
			private var _isMerged:Boolean;
			
			private function creationCompleteHandler(event:Event):void
			{
				if (shareConfig && shareConfig.parsedModel.vo.importVO)
				{
					skeletonDataNameTextInput.text = shareConfig.parsedModel.vo.importVO.name;
				}
				
				updateView();
			}
			
			private function updateView():void
			{
				var configObject:Object = dataFormatDropDownList.selectedItem;
				if (configObject)
				{
					_isMerged = configObject.value == GlobalConstValues.CONFIG_TYPE_MERGED;
					var backupselected:int = _settingManager.exportTextureFormatIndex;
					
					if (_isMerged)
					{
						textureFormatDropDownList.dataProvider = _settingManager.exportTextureMergedFormatAC;
					}
					else
					{
						textureFormatDropDownList.dataProvider = _settingManager.exportTextureFormatAC;
					}
					
					textureFormatDropDownList.selectedIndex = Math.max(Math.min(backupselected, textureFormatDropDownList.dataProvider.length - 1), 0);
					
					var textureObject:Object = textureFormatDropDownList.selectedItem;
					if (textureObject)
					{
						_isSWF = textureObject.value == GlobalConstValues.TEXTURE_ATLAS_TYPE_SWF;
						_isPNGs = textureObject.value == GlobalConstValues.TEXTURE_ATLAS_TYPE_PNGS;
					}
				}
			}
			
			private function changeHandler(event:Event):void
			{
				_settingManager.exportTextureFormatIndex = textureFormatDropDownList.selectedIndex;
				
				updateView();
			}
			
			private function clickHandler(event:Event):void
			{
				if (shareConfig && shareConfig.parsedModel.vo.importVO)
				{
					var exportVO:ExportVO = new ExportVO();
					exportVO.enableBackgroundColor = backgroundColorCheckBox.visible && backgroundColorCheckBox.selected;
					exportVO.name = skeletonDataNameTextInput.text || shareConfig.parsedModel.vo.importVO.name;
					_settingManager.setExportVOValues(exportVO);
					
					shareConfig.dispatcher.dispatchEvent(new ControllerEvent(ControllerEvent.EXPORT_FILE, [shareConfig.parsedModel.vo.importVO, exportVO]));
				}
				
				this.closeWindow();
			}
			
			protected function advanceBtn_clickHandler(event:MouseEvent):void
			{
				_settingManager.exportAdvancedExpanded = !_settingManager.exportAdvancedExpanded;
				
			}
			
			private function exportDataTypeChanged(event:Event):void
			{
				var isAbsolute:Boolean = event.target == absoluteDataTypeRadioBtn;
				_settingManager.exportDataTypeIndex = isAbsolute ? 0 : 1;
			}
		]]>
	</fx:Script>
	
	<view:layout>
		<s:VerticalLayout
			gap="10"
			paddingLeft="10"
			paddingRight="10"
			paddingTop="10"
			paddingBottom="30"
			/>
	</view:layout>
	
	<s:HGroup width="100%">
		<s:VGroup minWidth="100" gap="6" horizontalAlign="right">
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','dataFormat')}"/>
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','dataType')}"
					 visible="{!_isMerged}" includeInLayout="{!_isMerged}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','textureFormat')}"/>
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','exportscale')}"
					 visible="{!_isSWF}" includeInLayout="{!_isSWF}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','backgroundColor')}"
					 visible="{!_isSWF}" includeInLayout="{!_isSWF}"
					 />
			
		</s:VGroup>
		
		<s:VGroup width="100%" gap="6">
			<s:DropDownList width="100%" height="24" textAlign="right" 
							id="dataFormatDropDownList" labelField="label" 
							dataProvider="{_settingManager.exportDataFormatAC}" 
							selectedIndex="@{_settingManager.exportDataFormatIndex}" 
							change="changeHandler(event)"
							/>
			<s:HGroup width="100%" height="24" gap="10" visible="{!_isMerged}" includeInLayout="{!_isMerged}" verticalAlign="middle">
				
				<s:HGroup height="100%" verticalAlign="middle" gap="0"
						  toolTip="{_settingManager.enableExportGlobalDataType ?
						  			resourceManager.getString('resources','dataTypeAbsoluteToolTip') :
						  			resourceManager.getString('resources','dataTypeAbsoluteDisableToolTip')}">
					<s:RadioButton id="absoluteDataTypeRadioBtn" groupName="exportDataType"
								   selected="{_settingManager.exportDataTypeIndex == 0}"
								   enabled="{_settingManager.enableExportGlobalDataType}" 
								   change="exportDataTypeChanged(event)"/>
					<s:Label enabled="{_settingManager.enableExportGlobalDataType}" 
							 text="{resourceManager.getString('resources','dataTypeAbsolute')}"/>
				</s:HGroup>
				<s:HGroup height="100%" verticalAlign="middle" gap="0" 
						  toolTip="{resourceManager.getString('resources','dataTypeRelativeToolTip')}">
					<s:RadioButton id="relativeDataTypeRadioBtn" groupName="exportDataType"
								   selected="{_settingManager.exportDataTypeIndex == 1}"
								   change="exportDataTypeChanged(event)"/>
					<s:Label text="{resourceManager.getString('resources','dataTypeRelative')}"/>
				</s:HGroup>
				
				<s:Spacer width="20"/>
				<s:CheckBox label="{resourceManager.getString('resources','compressData')}" 
							selected="@{_settingManager.enableDataOptimization}" 
							toolTip="{resourceManager.getString('resources','compressDataToolTip')}" />
				
				
			</s:HGroup>
			<s:DropDownList width="100%" height="24" textAlign="right" 
							id="textureFormatDropDownList" labelField="label" 
							selectedIndex="{_settingManager.exportTextureFormatIndex}" 
							change="changeHandler(event)"
							/>
			<mx:NumericStepper width="100%" minimum="0.01" maximum="64" stepSize="0.01" textAlign="right"
							  value="@{_settingManager.exportScale}" visible="{!_isSWF}" includeInLayout="{!_isSWF}"
							  />
			
			<s:HGroup width="100%" verticalAlign="middle"
					  visible="{!_isSWF}" includeInLayout="{!_isSWF}"
					  >
				<s:CheckBox id="backgroundColorCheckBox" width="13"/>
				<mx:ColorPicker width="24" height="24" 
								selectedColor="@{_settingManager.exportBackgroundColor}" 
								enabled="{backgroundColorCheckBox.selected}"
								/>
			</s:HGroup>
			
		</s:VGroup>
	</s:HGroup>
		
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label id="advanceBtn" textAlign="right" 
				 text="{(_settingManager.exportAdvancedExpanded ? 'V ' : '> ') + resourceManager.getString('resources','advanceOption')}" useHandCursor="true" buttonMode="true" click="advanceBtn_clickHandler(event)"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#999999"/>
			</s:stroke>
		</s:Line>
	</s:HGroup>
	
	<s:HGroup id="advanceContainer" width="100%" visible="{_settingManager.exportAdvancedExpanded}" includeInLayout="{_settingManager.exportAdvancedExpanded}">
		<s:VGroup  minWidth="100" gap="6" horizontalAlign="right">
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','skeletonDataName')}"/>
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','skeletonDataFileName')}"
					 visible="{!_isMerged}" includeInLayout="{!_isMerged}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','textureDataFileName')}"
					 visible="{!(_isMerged || _isPNGs)}" includeInLayout="{!(_isMerged || _isPNGs)}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','textureFileName')}"
					 visible="{!(_isMerged || _isPNGs)}" includeInLayout="{!(_isMerged || _isPNGs)}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','subTextureFolderName')}"
					 visible="{_isPNGs}" includeInLayout="{_isPNGs}"
					 />
			<s:Label height="24" textAlign="right" verticalAlign="middle" text="{resourceManager.getString('resources','textureAtlasPath')}"
					 visible="{!(_isMerged || _isPNGs)}" includeInLayout="{!(_isMerged || _isPNGs)}"
					 />
		</s:VGroup>
		<s:VGroup width="100%" gap="6">
			<s:TextInput id="skeletonDataNameTextInput" width="100%" height="24" textAlign="right"
						 />
			
			<s:TextInput width="100%" height="24" textAlign="right" 
						 text="@{_settingManager.dragonBonesFileName}"
						 visible="{!_isMerged}" includeInLayout="{!_isMerged}"
						 />
			
			<s:TextInput width="100%" height="24" textAlign="right" 
						 text="@{_settingManager.textureAtlasFileName}"
						 visible="{!_isMerged &amp;&amp; !_isPNGs}" includeInLayout="{!_isMerged &amp;&amp; !_isPNGs}"
						 />
			
			<s:TextInput width="100%" height="24" textAlign="right" 
						 text="@{_settingManager.textureAtlasConfigFileName}"
						 visible="{!_isMerged &amp;&amp; !_isPNGs}" includeInLayout="{!_isMerged &amp;&amp; !_isPNGs}"
						 />
			
			<s:TextInput width="100%" height="24" textAlign="right" 
						 text="@{_settingManager.subTextureFolderName}"
						 visible="{_isPNGs}" includeInLayout="{_isPNGs}"
						 />
			
			<s:TextInput width="100%" height="24" textAlign="right" 
						 text="@{_settingManager.textureAtlasPath}"
						 visible="{!_isMerged &amp;&amp; !_isPNGs}" includeInLayout="{!_isMerged &amp;&amp; !_isPNGs}"
						 />
		</s:VGroup>
	</s:HGroup>
	<s:Spacer height="10"/>
	
	<s:HGroup width="100%" horizontalAlign="center">
		<s:Button width="100" height="24" cornerRadius="0"
				  id="buttonOK"
				  label="{resourceManager.getString('resources','ok')}"
				  click="clickHandler(event)"
				  />
		
		<s:Button width="100" height="24" cornerRadius="0"
				  label="{resourceManager.getString('resources','cancel')}"
				  click="closeHandler(event)"
				  />
	</s:HGroup>
	
</view:BaseWindow>
