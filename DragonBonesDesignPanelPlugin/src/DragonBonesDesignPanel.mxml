<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   
			   xmlns:mxml="robotlegs.bender.mxml.*"
			   xmlns:mvcs="robotlegs.bender.bundles.mvcs.*"
			   
			   xmlns:core="core.*"
			   xmlns:coreView="core.view.*"
			   
			   xmlns:plugin="plugin.*"
			   xmlns:pluginView="plugin.view.*"
			   
			   xmlns:local="*"
			   applicationComplete="applicationCompleteHandler()"
			   
			   fontSize="12"
			   >
	
	<fx:Declarations>
		<mxml:ContextBuilderTag id="contextTag">
			<mvcs:MVCSBundle/>
			<core:ShareConfig id="shareConfig"/>
			<plugin:PluginConfig/>
		</mxml:ContextBuilderTag>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import cloud.GA.DBGATrackerManager;
			
			import core.SettingManager;
			import core.events.ControllerEvent;
			import core.model.vo.ImportVO;
			import core.utils.GlobalConstValues;
			
			import dragonBones.core.DragonBones;
			
			import dragonbones.cloud.DBCloud;
			import dragonbones.cloud.DBNetworkUtils;
			import dragonbones.cloud.events.DBCloudEvent;
			import dragonbones.cloud.events.DBNetworkEvent;
			
			import plugin.view.ExportWindow;
			import plugin.view.ImportWindow;
			import plugin.view.TextureAtlasWindow;
			import plugin.view.XMLWindow;
			import plugin.view.AboutWindow;
			
			[Bindable]
			private var _settingManager:SettingManager = SettingManager.getInstance();
			
			private function applicationCompleteHandler():void
			{
				this.stage.frameRate = 60;
				
				DBGATrackerManager.createDBGATracker(this);
				DBGATrackerManager.trackPageview("/");
				DBGATrackerManager.trackEvent("Version", "Version:" + String(GlobalConstValues.versionNumber));
				
				DBCloud.instance.addEventListener(DBCloudEvent.INITED, cloud_onInited);
				DBNetworkUtils.instance.addEventListener(DBNetworkEvent.STATUS_CHANGED, network_onStatusChanged);
				DBCloud.instance.init();
				
				var data:String = this.stage.loaderInfo.parameters["data"];
				if(data)
				{
					var importVO:ImportVO = new ImportVO();
					_settingManager.setImportVOValues(importVO);
					importVO.url = data;
					importVO.importType = GlobalConstValues.IMPORT_TYPE_EXPORTED;
					importVO.isToMerge = false;
					
					armaturesPanelDispatchEvent(new ControllerEvent(ControllerEvent.IMPORT_FILE, importVO));
				}
			}
			
			private function cloud_onInited(event:DBCloudEvent):void
			{
				DBCloud.instance.removeEventListener(DBCloudEvent.INITED, cloud_onInited);
			}
			
			private function network_onStatusChanged(event:DBNetworkEvent):void
			{
				trace("network_onStatusChanged");
				onlineStatus.selectedIndex = DBNetworkUtils.instance.isNetworkAvailable ? 1 : 0;
				if(DBNetworkUtils.instance.isNetworkAvailable)
				{
					DBCloud.instance.addEventListener(DBCloudEvent.LOAD_LATESTVERSION_SUCCESS, cloud_onLoadLatestVersionSuccess);
					DBCloud.instance.loadLatestVersion();
				}
			}
			
			private function cloud_onLoadLatestVersionSuccess(event:DBCloudEvent):void
			{
				trace("cloud_onLoadLatestVersionSuccess");
				var latestVersion:Number = Number(event.data.outputData);
				if(latestVersion > GlobalConstValues.versionNumber)
				{
					DBCloud.instance.ifNeedUpdate = 1;
					upgradeBtn.visible = true; 
				}
				else
				{
					DBCloud.instance.ifNeedUpdate = -1;
					upgradeBtn.visible = false; 
				}
			}
			
			private function menuClickHandler(e:Event):void
			{
				switch (e.target)
				{
					case buttonImport:
						var importWindow:ImportWindow = new ImportWindow();
						importWindow.shareConfig = shareConfig;
						importWindow.showWindow(this);
						break;
					
					case buttonExport:
						var exportWindow:ExportWindow = new ExportWindow();
						exportWindow.shareConfig = shareConfig;
						exportWindow.showWindow(this);
						break;
					
					case buttonTextureAtlas:
						var textureAtlasWindow:TextureAtlasWindow = new TextureAtlasWindow();
						textureAtlasWindow.shareConfig = shareConfig;
						textureAtlasWindow.showWindow(this, true);
						break;
					
					case buttonXML:
						var xmlWindow:XMLWindow = new XMLWindow();
						xmlWindow.shareConfig = shareConfig;
						xmlWindow.showWindow(this, true);
						break;
					
					case buttonAbout:
						var aboutWindow:AboutWindow = new AboutWindow();
						aboutWindow.showWindow(this, true);
						break;
				}
			}
			
			private function armaturesPanelDispatchEvent(e:Event):void
			{
				shareConfig.dispatcher.dispatchEvent(e);
			}
			
			private function checkOnlineStatus():void
			{
				DBNetworkUtils.instance.testNetwork();
			}
			
			private function downloadNewVersion():void
			{
				DBGATrackerManager.trackEvent("/:DownloadNewVersion", "/:DownloadNewVersion. CurrentVersion:" + String(DragonBones.VERSION));
				navigateToURL(new URLRequest("http://dragonbones.github.io/download.html"));
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" gap="10" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<s:HGroup width="100%" gap="10">
			<s:Button id="buttonImport" height="24" cornerRadius="0" 
					  label="{resourceManager.getString('resources', 'import')}" 
					  click="menuClickHandler(event)"
					  />
			<s:Button id="buttonExport" height="24" cornerRadius="0" 
					  label="{resourceManager.getString('resources', 'export')}"
					  click="menuClickHandler(event)"
					  />
			<s:Button id="buttonTextureAtlas" height="24" cornerRadius="0" 
					  label="{resourceManager.getString('resources', 'textureAtlas')}" 
					  click="menuClickHandler(event)"
					  />
			<s:Button id="buttonXML" height="24" cornerRadius="0" 
					  label="{resourceManager.getString('resources', 'xml')}" 
					  click="menuClickHandler(event)"
					  />
			<s:Button id="buttonAbout" height="24" cornerRadius="0" 
					  label="{resourceManager.getString('resources', 'about')}" 
					  click="menuClickHandler(event)"
					  />
			
			<s:Spacer width="100%"/>
			
			<mx:ViewStack id="onlineStatus" height="100%">
				<s:NavigatorContent height="100%">
					<s:Label id="offlineLabel" height="100%" verticalAlign="middle" color="#999999" text="offline" 
							 buttonMode="true" useHandCursor="true" toolTip="click to check internet again"
							 click="checkOnlineStatus()"/>
				</s:NavigatorContent>
				<s:NavigatorContent height="100%">
					<s:Label id="upgradeBtn" width="24" right="0" color="#03E2EA"  text="&lt;&lt;" rotation="90" visible="false"
							 verticalAlign="middle" textAlign="center" buttonMode="true" useHandCursor="true" toolTip="new version detected"
							 click="downloadNewVersion()"/>
				</s:NavigatorContent>
			</mx:ViewStack>
			
			<s:DropDownList width="100" height="24" cornerRadius="0" textAlign="right" 
							dataProvider="{_settingManager.languageAC}" 
							selectedIndex="@{_settingManager.languageIndex}"
							/>
		</s:HGroup>
		
		<coreView:ArmaturesPanel width="100%" height="100%"
			id="armaturesPanel" 
			/>
		
	</s:VGroup>
	
</s:Application>
