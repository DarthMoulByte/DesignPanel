<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  addedToStage="addedToStageHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private function addedToStageHandler(event:Event):void
			{
				sliderFadeTime.addEventListener(Event.CHANGE, valueChangeHandler);
				numFadeTime.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDurationScaled.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationScaled.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, valueChangeHandler);
				
				checkLoop.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_ANIMATION, commandHandler);	
			}
			
			private function commandHandler(e:Message):void
			{
				if(e.parameters[0] != _importDataProxy.armatureProxy)
				{
					return;
				}
				switch(e.type)
				{
					case MessageDispatcher.SELECT_ANIMATION:
						var fadeTime:Number = _importDataProxy.armatureProxy.fadeTime;
						var durationScaled:Number = _importDataProxy.armatureProxy.durationScaled;
						if(fadeTime < 0)
						{
							numFadeTime.enabled = false;
							sliderFadeTime.enabled = false;
						}
						else
						{
							numFadeTime.value = fadeTime;
							numFadeTime.enabled = true;
							sliderFadeTime.value = fadeTime;
							sliderFadeTime.enabled = true;
						}
						if(durationScaled < 0)
						{
							numDurationScaled.enabled = false;
							sliderDurationScaled.enabled = false;
							checkLoop.selected = false;
							checkLoop.enabled = false;
							sliderTweenEasing.enabled = false;
						}
						else
						{
							numDurationScaled.value = durationScaled;
							numDurationScaled.enabled = true;
							sliderDurationScaled.value = durationScaled;
							sliderDurationScaled.enabled = true;
							checkLoop.selected = _importDataProxy.armatureProxy.loop;
							checkLoop.enabled = true;
							sliderTweenEasing.value = _importDataProxy.armatureProxy.tweenEasing;
							sliderTweenEasing.enabled = true;
						}
						break;
				}
			}
			
			private function valueChangeHandler(e:Event):void
			{
				switch(e.target)
				{
					case sliderFadeTime:
						_importDataProxy.armatureProxy.fadeTime = sliderFadeTime.value;
						sliderFadeTime.value = numFadeTime.value = _importDataProxy.armatureProxy.fadeTime;
						break;
					case numFadeTime:
						_importDataProxy.armatureProxy.fadeTime = numFadeTime.value;
						sliderFadeTime.value = numFadeTime.value = _importDataProxy.armatureProxy.fadeTime;
						break;
					case sliderDurationScaled:
						_importDataProxy.armatureProxy.durationScaled = sliderDurationScaled.value;
						sliderDurationScaled.value = numDurationScaled.value = _importDataProxy.armatureProxy.durationScaled;
						break;
					case numDurationScaled:
						_importDataProxy.armatureProxy.durationScaled = numDurationScaled.value;
						sliderDurationScaled.value = numDurationScaled.value = _importDataProxy.armatureProxy.durationScaled;
						break;
					case sliderTweenEasing:
						_importDataProxy.armatureProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case checkLoop:
						_importDataProxy.armatureProxy.loop = checkLoop.selected;
						break;
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
		<s:VGroup width="100%" gap="0" paddingLeft="6" paddingRight="6">
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','totalTime')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderDurationScaled" width="100%"
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:NumericStepper id="numDurationScaled" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
			</s:HGroup>
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','blendingTime')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderFadeTime" width="100%"
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:NumericStepper id="numFadeTime" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
			</s:HGroup>
			
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','keyFrameEase')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderTweenEasing" width="100%"
						   minimum="-1.1" maximum="2" snapInterval="0.05"
						   />
				<s:Spacer width="60" height="24"/>
			</s:HGroup>
			
			<s:CheckBox id="checkLoop" width="100%" height="24"
						label="{resourceManager.getString('resources','loop')}"/>
			
		</s:VGroup>
	</s:Scroller>
</s:Group>