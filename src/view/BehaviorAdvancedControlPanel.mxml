<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  addedToStage="addedToStageHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private function addedToStageHandler(event:Event):void
			{
				sliderFadeInTime.addEventListener(Event.CHANGE, valueChangeHandler);
				numFadeInTime.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDurationScaled.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationScaled.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderLoop.addEventListener(Event.CHANGE, valueChangeHandler);
				numLoop.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, valueChangeHandler);
				checkTweenEasing.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_ANIMATION, commandHandler);	
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ANIMATION_DATA, commandHandler);	
			}
			
			private function commandHandler(e:Message):void
			{
				if(e.parameters[0] != _importDataProxy.armatureProxy)
				{
					return;
				}
				switch(e.type)
				{
					case MessageDispatcher.SELECT_ANIMATION:
					case MessageDispatcher.CHANGE_ANIMATION_DATA:
						var fadeTime:Number = _importDataProxy.armatureProxy.fadeInTime;
						var durationScaled:Number = _importDataProxy.armatureProxy.durationScaled;
						var loop:int = _importDataProxy.armatureProxy.loop;
						var tweenEasing:Number = _importDataProxy.armatureProxy.tweenEasing;
						if(fadeTime < 0)
						{
							numFadeInTime.enabled = false;
							sliderFadeInTime.enabled = false;
						}
						else
						{
							numFadeInTime.value = fadeTime;
							numFadeInTime.enabled = true;
							sliderFadeInTime.value = fadeTime;
							sliderFadeInTime.enabled = true;
						}
						if(durationScaled < 0)
						{
							numDurationScaled.enabled = false;
							sliderDurationScaled.enabled = false;
							sliderLoop.enabled = false;
							numLoop.enabled = false;
							sliderTweenEasing.enabled = false;
						}
						else
						{
							numDurationScaled.value = durationScaled;
							numDurationScaled.enabled = true;
							sliderDurationScaled.value = durationScaled;
							sliderDurationScaled.enabled = true;
							sliderLoop.enabled = true;
							numLoop.enabled = true;
							sliderLoop.value = loop;
							numLoop.value = loop
							
							if(isNaN(tweenEasing))
							{
								checkTweenEasing.selected = false;
								sliderTweenEasing.enabled = false;
								sliderTweenEasing.value = 0;
							}
							else
							{
								checkTweenEasing.selected = true;
								sliderTweenEasing.enabled = true;
								sliderTweenEasing.value = tweenEasing;
							}
						}
						break;
				}
			}
			
			private function valueChangeHandler(e:Event):void
			{
				switch(e.target)
				{
					case sliderFadeInTime:
						_importDataProxy.armatureProxy.fadeInTime = sliderFadeInTime.value;
						sliderFadeInTime.value = numFadeInTime.value = _importDataProxy.armatureProxy.fadeInTime;
						break;
					case numFadeInTime:
						_importDataProxy.armatureProxy.fadeInTime = numFadeInTime.value;
						sliderFadeInTime.value = numFadeInTime.value = _importDataProxy.armatureProxy.fadeInTime;
						break;
					case sliderDurationScaled:
						_importDataProxy.armatureProxy.durationScaled = sliderDurationScaled.value;
						sliderDurationScaled.value = numDurationScaled.value = _importDataProxy.armatureProxy.durationScaled;
						break;
					case numDurationScaled:
						_importDataProxy.armatureProxy.durationScaled = numDurationScaled.value;
						sliderDurationScaled.value = numDurationScaled.value = _importDataProxy.armatureProxy.durationScaled;
						break;
					case sliderLoop:
						_importDataProxy.armatureProxy.loop = sliderLoop.value;
						sliderLoop.value = numLoop.value = _importDataProxy.armatureProxy.loop;
						break;
					case numLoop:
						_importDataProxy.armatureProxy.loop = numLoop.value;
						sliderLoop.value = numLoop.value = _importDataProxy.armatureProxy.loop;
						break;
					case sliderTweenEasing:
						_importDataProxy.armatureProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case checkTweenEasing:
						if(checkTweenEasing.selected)
						{
							_importDataProxy.armatureProxy.tweenEasing = 0;
						}
						else
						{
							_importDataProxy.armatureProxy.tweenEasing = NaN;
						}
						break;
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
		<s:VGroup width="100%" gap="0" paddingLeft="6" paddingRight="6">
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','totalTime')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderDurationScaled" width="100%"
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:NumericStepper id="numDurationScaled" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
			</s:HGroup>
			
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','blendingTime')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderFadeInTime" width="100%"
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:NumericStepper id="numFadeInTime" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
			</s:HGroup>
			
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','loop')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderLoop" width="100%"
						   minimum="-20" maximum="20" snapInterval="1"
						   />
				<s:NumericStepper id="numLoop" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="100" minimum="-100" snapInterval="1"
								  />
			</s:HGroup>
			
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','keyFrameEase')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderTweenEasing" width="100%"
						   minimum="-1" maximum="2" snapInterval="0.05"
						   />
				<s:CheckBox id="checkTweenEasing" width="15" label=""/>
			</s:HGroup>
			
		</s:VGroup>
	</s:Scroller>
</s:Group>